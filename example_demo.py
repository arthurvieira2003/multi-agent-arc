#!/usr/bin/env python3
"""
Demonstra√ß√£o do Sistema Multi-Agente
====================================

Este exemplo mostra como usar o sistema multi-agente para processar diferentes tipos de tarefas,
demonstrando o fluxo completo de planejamento, execu√ß√£o e verifica√ß√£o.
"""

from datetime import datetime
from models import Task, TaskPriority, TaskStatus
from multi_agent_system import MultiAgentSystem

def create_sample_tasks():
    """Cria tarefas de exemplo para demonstra√ß√£o"""
    
    tasks = []
    
    # Tarefa 1: Desenvolvimento de API simples
    task1 = Task(
        id="",
        title="Desenvolver API REST para Gerenciamento de Usu√°rios",
        description="Criar uma API REST completa para gerenciar usu√°rios com opera√ß√µes CRUD, autentica√ß√£o e documenta√ß√£o",
        priority=TaskPriority.HIGH,
        status=TaskStatus.PENDING,
        created_at=datetime.now(),
        updated_at=datetime.now(),
        requirements=[
            "Endpoints para CRUD de usu√°rios",
            "Sistema de autentica√ß√£o JWT",
            "Valida√ß√£o de dados",
            "Documenta√ß√£o da API",
            "Testes unit√°rios e de integra√ß√£o"
        ],
        expected_output="API funcional com documenta√ß√£o completa"
    )
    tasks.append(task1)
    
    # Tarefa 2: Sistema de relat√≥rios
    task2 = Task(
        id="",
        title="Implementar Sistema de Relat√≥rios",
        description="Desenvolver sistema para gerar relat√≥rios autom√°ticos com gr√°ficos e exporta√ß√£o em PDF",
        priority=TaskPriority.MEDIUM,
        status=TaskStatus.PENDING,
        created_at=datetime.now(),
        updated_at=datetime.now(),
        requirements=[
            "Gera√ß√£o de gr√°ficos din√¢micos",
            "Exporta√ß√£o para PDF",
            "Interface web responsiva",
            "Agendamento de relat√≥rios",
            "Cache de dados"
        ],
        expected_output="Sistema de relat√≥rios funcional com interface web"
    )
    tasks.append(task2)
    
    # Tarefa 3: Integra√ß√£o com API externa (tarefa complexa)
    task3 = Task(
        id="",
        title="Integra√ß√£o com API de Pagamentos",
        description="Integrar sistema com API externa de pagamentos, incluindo webhook para notifica√ß√µes e tratamento de erros robusto",
        priority=TaskPriority.CRITICAL,
        status=TaskStatus.PENDING,
        created_at=datetime.now(),
        updated_at=datetime.now(),
        requirements=[
            "Integra√ß√£o com API de pagamentos",
            "Processamento de webhooks",
            "Tratamento de erros e retry logic",
            "Logs detalhados de transa√ß√µes",
            "Testes com sandbox",
            "Monitoramento de sa√∫de da integra√ß√£o",
            "Documenta√ß√£o t√©cnica detalhada"
        ],
        expected_output="Integra√ß√£o completa e robusta com API de pagamentos"
    )
    tasks.append(task3)
    
    return tasks

def demonstrate_single_task():
    """Demonstra o processamento de uma √∫nica tarefa"""
    print("üéØ DEMONSTRA√á√ÉO: PROCESSAMENTO DE TAREFA √öNICA")
    print("=" * 80)
    print()
    
    # Cria sistema multi-agente
    system = MultiAgentSystem()
    
    # Cria uma tarefa de exemplo
    task = Task(
        id="",
        title="Criar Dashboard de Monitoramento",
        description="Desenvolver dashboard web para monitoramento de sistema com m√©tricas em tempo real",
        priority=TaskPriority.HIGH,
        status=TaskStatus.PENDING,
        created_at=datetime.now(),
        updated_at=datetime.now(),
        requirements=[
            "Interface web responsiva",
            "Gr√°ficos em tempo real",
            "Alertas configur√°veis",
            "Hist√≥rico de m√©tricas"
        ],
        expected_output="Dashboard funcional com monitoramento em tempo real"
    )
    
    # Processa a tarefa
    result = system.process_task(task)
    
    # Mostra resultado
    print("üìã RESULTADO FINAL:")
    print("-" * 40)
    print(f"Status: {result['status']}")
    print(f"Tempo de conclus√£o: {result['completion_time']:.1f}s")
    if result['status'] == 'completed':
        print(f"Qualidade: {result['verification']['quality_score']:.2f}")
        print(f"Precis√£o: {result['verification']['accuracy_score']:.2f}")
    print()

def demonstrate_multiple_tasks():
    """Demonstra o processamento de m√∫ltiplas tarefas"""
    print("üöÄ DEMONSTRA√á√ÉO: PROCESSAMENTO DE M√öLTIPLAS TAREFAS")
    print("=" * 80)
    print()
    
    # Cria sistema multi-agente
    system = MultiAgentSystem()
    
    # Cria tarefas de exemplo
    tasks = create_sample_tasks()
    
    # Processa todas as tarefas
    results = system.process_multiple_tasks(tasks)
    
    # An√°lise dos resultados
    print("üìä AN√ÅLISE DOS RESULTADOS")
    print("=" * 60)
    
    successful_tasks = [r for r in results if r['status'] == 'completed']
    failed_tasks = [r for r in results if r['status'] == 'failed']
    
    print(f"‚úÖ Tarefas conclu√≠das com sucesso: {len(successful_tasks)}")
    print(f"‚ùå Tarefas que falharam: {len(failed_tasks)}")
    print(f"üìà Taxa de sucesso: {len(successful_tasks)/len(results):.1%}")
    print()
    
    if successful_tasks:
        avg_quality = sum(r['verification']['quality_score'] for r in successful_tasks) / len(successful_tasks)
        avg_accuracy = sum(r['verification']['accuracy_score'] for r in successful_tasks) / len(successful_tasks)
        avg_time = sum(r['completion_time'] for r in successful_tasks) / len(successful_tasks)
        
        print("üìä M√âTRICAS DAS TAREFAS CONCLU√çDAS:")
        print(f"   Qualidade m√©dia: {avg_quality:.2f}")
        print(f"   Precis√£o m√©dia: {avg_accuracy:.2f}")
        print(f"   Tempo m√©dio: {avg_time:.1f}s")
        print()
    
    return results

def demonstrate_replanning():
    """Demonstra o processo de re-planejamento"""
    print("üîÑ DEMONSTRA√á√ÉO: PROCESSO DE RE-PLANEJAMENTO")
    print("=" * 80)
    print()
    
    # Cria sistema multi-agente
    system = MultiAgentSystem()
    
    # Cria uma tarefa complexa que pode precisar de re-planejamento
    complex_task = Task(
        id="",
        title="Sistema de Machine Learning Completo",
        description="Desenvolver sistema completo de machine learning com pipeline de dados, treinamento de modelos, API de predi√ß√£o e monitoramento de performance",
        priority=TaskPriority.CRITICAL,
        status=TaskStatus.PENDING,
        created_at=datetime.now(),
        updated_at=datetime.now(),
        requirements=[
            "Pipeline de processamento de dados",
            "Treinamento automatizado de modelos",
            "API REST para predi√ß√µes",
            "Monitoramento de drift de dados",
            "Interface web para visualiza√ß√£o",
            "Testes automatizados",
            "Documenta√ß√£o t√©cnica completa",
            "Deploy automatizado",
            "Logs e m√©tricas detalhadas"
        ],
        expected_output="Sistema ML completo em produ√ß√£o"
    )
    
    # Processa com mais tentativas de re-planejamento
    result = system.process_task(complex_task, max_replanning_attempts=3)
    
    print("üìã RESULTADO DO RE-PLANEJAMENTO:")
    print("-" * 50)
    print(f"Status: {result['status']}")
    print(f"Tentativas de re-planejamento: {result['replanning_attempts']}")
    print(f"Tempo total: {result['completion_time']:.1f}s")
    print()

def main():
    """Fun√ß√£o principal da demonstra√ß√£o"""
    print("ü§ñ SISTEMA MULTI-AGENTE - DEMONSTRA√á√ÉO COMPLETA")
    print("=" * 80)
    print()
    print("Este exemplo demonstra uma arquitetura multi-agente baseada na imagem fornecida,")
    print("com tr√™s agentes especializados trabalhando em conjunto:")
    print()
    print("üìã Planner Agent: Quebra problemas complexos em subtarefas")
    print("‚öôÔ∏è  Execution Agent: Executa as subtarefas do plano")
    print("‚úÖ Verification Agent: Verifica qualidade e precis√£o dos resultados")
    print()
    print("O sistema implementa o ciclo completo mostrado na imagem:")
    print("Requests ‚Üí Planning ‚Üí Execution ‚Üí Verification ‚Üí Completed Tasks")
    print("Com re-planejamento autom√°tico quando necess√°rio.")
    print()
    input("Pressione Enter para continuar...")
    print()
    
    # Demonstra√ß√£o 1: Tarefa √∫nica
    demonstrate_single_task()
    input("Pressione Enter para continuar para a pr√≥xima demonstra√ß√£o...")
    print()
    
    # Demonstra√ß√£o 2: M√∫ltiplas tarefas
    demonstrate_multiple_tasks()
    input("Pressione Enter para continuar para a pr√≥xima demonstra√ß√£o...")
    print()
    
    # Demonstra√ß√£o 3: Re-planejamento
    demonstrate_replanning()
    
    print("üéâ DEMONSTRA√á√ÉO CONCLU√çDA!")
    print()
    print("O sistema multi-agente demonstrou com sucesso:")
    print("‚úÖ Planejamento inteligente de tarefas")
    print("‚úÖ Execu√ß√£o coordenada de subtarefas")
    print("‚úÖ Verifica√ß√£o de qualidade autom√°tica")
    print("‚úÖ Re-planejamento adaptativo")
    print("‚úÖ M√©tricas de performance detalhadas")
    print()

if __name__ == "__main__":
    main() 